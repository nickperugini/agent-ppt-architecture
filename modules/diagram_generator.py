# Generated by AIG Copilot - start
# filepath: c:\langchain\agent-ppt-architecture\modules\diagram_generator.py

from diagrams import Diagram
from diagrams.aws.compute import Lambda, ECS
from diagrams.aws.integration import StepFunctions, Eventbridge
from diagrams.aws.network import APIGateway, ELB, VPC
from diagrams.aws.storage import S3
from diagrams.aws.database import Dynamodb
from diagrams.onprem.client import Users

def _get_node(component_name):
    # Helper to map component name to diagram node, using type prefix
    # Example: Lambda_uploadToS3, S3_bucket1, APIGateway_httpApi
    if component_name.startswith("Lambda"):
        return Lambda(component_name)
    if component_name.startswith("S3"):
        return S3(component_name)
    if component_name.startswith("APIGateway"):
        return APIGateway(component_name)
    if component_name.startswith("DynamoDB"):
        return Dynamodb(component_name)
    if component_name.startswith("VPC"):
        return VPC(component_name)
    if component_name.startswith("ALB"):
        return ELB(component_name)
    if component_name.startswith("ECS"):
        return ECS(component_name)
    if component_name.startswith("StepFunctions"):
        return StepFunctions(component_name)
    if component_name.startswith("EventBridge"):
        return Eventbridge(component_name)
    if component_name.startswith("Client"):
        return Users(component_name)
    # fallback
    return Users(component_name)

def generate_architecture_diagram(components: set, relations=None, filename="solution_architecture"):
    filepath = f"{filename}.png"
    with Diagram("Serverless Architecture", show=False, filename=filename, outformat="png"):
        nodes = {}
        for comp in components:
            nodes[comp] = _get_node(comp)
        # If relations are provided, use them to draw edges
        if relations:
            for rel in relations:
                src = rel.get("source")
                tgt = rel.get("target")
                if src in nodes and tgt in nodes:
                    nodes[src] >> nodes[tgt]
        else:
            # fallback: try to connect all Clients to all APIGateways, all APIGateways to all Lambdas, etc.
            clients = [c for c in nodes if c.startswith("Client")]
            apis = [c for c in nodes if c.startswith("APIGateway")]
            lambdas = [c for c in nodes if c.startswith("Lambda")]
            s3s = [c for c in nodes if c.startswith("S3")]
            for client in clients:
                for api in apis:
                    nodes[client] >> nodes[api]
            for api in apis:
                for lamb in lambdas:
                    nodes[api] >> nodes[lamb]
            for lamb in lambdas:
                for s3 in s3s:
                    nodes[lamb] >> nodes[s3]
    return filepath
# Generated by AIG Copilot - end
