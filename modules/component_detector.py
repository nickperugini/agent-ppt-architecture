# Generated by AIG Copilot - start
# filepath: c:\langchain\agent-ppt-architecture\modules\component_detector.py

import re
import os
import json

def read_all_code(base_path="./repo"):
    code = ""
    for root, _, files in os.walk(base_path):
        for file in files:
            if file.endswith((".py", ".tf", ".yml", ".yaml", ".json", ".js", ".ts")):
                try:
                    with open(os.path.join(root, file), encoding="utf-8") as f:
                        code += f"\n# File: {file}\n" + f.read()
                except Exception as e:
                    code += f"\n# Error reading {file}: {e}\n"
    return code

def detect_components_regex(code_text: str) -> set:
    components = {"Client"}
    checks = {
        "APIGateway": [r"event\['httpMethod'\]", r"aws_apigateway", r"apigatewayv2"],
        "Lambda": [r"def lambda_handler", r"aws_lambda_function", r"arn:aws:lambda"],
        "S3": [r"boto3\.client\(['\"]s3['\"]", r"aws_s3_bucket", r"upload_file", r"put_object"],
        "DynamoDB": [r"boto3\.client\(['\"]dynamodb['\"]", r"aws_dynamodb_table"],
        "VPC": [r"aws_vpc", r"vpc_config", r"subnet", r"lambda_subnet_ids"],
        "ALB": [r"aws_lb", r"aws_alb", r"boto3\.client\(['\"]elbv2['\"]"],
        "ECS": [r"aws_ecs", r"boto3\.client\(['\"]ecs['\"]"],
        "StepFunctions": [r"boto3\.client\(['\"]stepfunctions['\"]", r"aws_sfn"],
        "EventBridge": [r"boto3\.client\(['\"]events['\"]", r"eventbridge"]
    }
    for key, patterns in checks.items():
        for pattern in patterns:
            if re.search(pattern, code_text, re.IGNORECASE):
                components.add(key)
                break
    return components

def detect_components_llm(code_text: str, llm) -> set:
    response = llm.invoke(
        "Which AWS services or components (e.g., Lambda, S3, API Gateway, VPC, ECS, Step Functions, EventBridge, etc.) are used in this code? "
        "If there are multiple instances of a component (e.g., multiple Lambdas), list each with a unique name or identifier. "
        "Just return a list of component names:\n\n"
        f"{code_text[:5000]}"
    )
    response_text = response.content.lower() if hasattr(response, "content") else str(response).lower()
    components = {"Client"}
    keywords = {
        "lambda": "Lambda",
        "s3": "S3",
        "api gateway": "APIGateway",
        "dynamodb": "DynamoDB",
        "vpc": "VPC",
        "alb": "ALB",
        "ecs": "ECS",
        "step functions": "StepFunctions",
        "stepfunctions": "StepFunctions",
        "eventbridge": "EventBridge",
        "event bus": "EventBridge"
    }
    for word, comp in keywords.items():
        if word in response_text:
            components.add(comp)
    return components

def detect_components_and_relations_llm(code_text: str, llm) -> tuple[set, list]:
    """
    Uses the LLM to extract both AWS components (with unique names if multiple) and their interactions from the code.
    Returns a tuple: (set of component names, list of (source, target, description) relations)
    Generated by AIG Copilot.
    """
    prompt = (
        "Analyze the following codebase and answer in JSON format with two keys: "
        "'components' (a list of all AWS or architectural components detected, using unique names or identifiers for each instance, e.g., Lambda_uploadToS3, S3_bucket1, APIGateway_httpApi, etc.) "
        "and 'relations' (a list of objects, each with 'source', 'target', and 'description' fields, describing how specific components interact). "
        "For each component, use a clear, unique name (such as the resource name, logical ID, or function name). "
        "For each relation, keep the description concise (one line) and focused on the main interaction. "
        "Format your response so it is easy to parse and fits within a single screen. "
        "Example:\n"
        "{\n"
        "  \"components\": [\"Lambda_uploadToS3\", \"S3_lambdaBucket\", \"APIGateway_httpApi\"],\n"
        "  \"relations\": [\n"
        "    {\"source\": \"APIGateway_httpApi\", \"target\": \"Lambda_uploadToS3\", \"description\": \"API Gateway triggers Lambda function uploadToS3\"},\n"
        "    {\"source\": \"Lambda_uploadToS3\", \"target\": \"S3_lambdaBucket\", \"description\": \"Lambda function uploads files to S3 bucket\"}\n"
        "  ]\n"
        "}\n"
        "Codebase:\n"
        f"{code_text[:5000]}"
    )
    response = llm.invoke(prompt)
    components = set()
    relations = []
    try:
        data = json.loads(response.content if hasattr(response, "content") else str(response))
        components = set(data.get("components", []))
        relations = data.get("relations", [])
    except Exception as e:
        # fallback: just use keywords as before
        components = detect_components_llm(code_text, llm)
        relations = []
    # Always add "Client" as a component
    components.add("Client")
    return components, relations
# Generated by AIG Copilot - end
