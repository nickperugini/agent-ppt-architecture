# Generated by AIG Copilot - start
# Generated by AIG Copilot

from dotenv import load_dotenv
load_dotenv()

import os
from langchain_community.llms import LlamaCpp  # Use LlamaCpp for local inference
from modules.readme_scraper import scrape_github_readme
from modules.code_parser import clone_and_summarize_code
from modules.slides import generate_presentation
from modules.component_detector import (
    read_all_code, detect_components_regex, detect_components_llm, detect_components_and_relations_llm
)
from modules.diagram_generator import generate_architecture_diagram

GITHUB_REPO_URL = "https://github.com/nickperugini/agent-repo-test"

def main():
    # Path to your downloaded GGUF model
    model_path = r"C:/models/codellama-7b-instruct.Q4_K_M.gguf"  # Updated to your downloaded model
    llm = LlamaCpp(
        model_path=model_path,
        n_ctx=4096,
        temperature=0.1,
        max_tokens=512
    )

    readme_content = scrape_github_readme(GITHUB_REPO_URL)
    clone_and_summarize_code(GITHUB_REPO_URL)  # download the repo
    full_code = read_all_code()
    # Use smarter LLM-based extraction
    components, relations = detect_components_and_relations_llm(full_code, llm)
    diagram_path = generate_architecture_diagram(components, relations=relations)

    repo_name = GITHUB_REPO_URL.rstrip("/").split("/")[-1]

    slide_prompts = {
        "title": (
            "Generate a concise, well-formatted title for this repository. "
            "Do not include dashes, slashes, underscores, or file extensions. "
            "Capitalize each word appropriately and ensure correct punctuation. "
            "Limit the title to a single line that will fit on a presentation slide. "
            "Repository name:\n\n"
            f"{repo_name}"
        ),
        "Objective of the application": (
            "Summarize the main objective of this project in 2-3 clear sentences, suitable for a technical audience. "
            "Be specific about the application's purpose and its primary use case. "
            "Keep the summary concise and avoid unnecessary details. "
            "Format the response as a short paragraph that will fit on a single presentation slide. "
            "If the summary is too long, trim it to fit comfortably on the slide. "
            "README content:\n"
            f"{readme_content}"
        ),
        "Solution Architecture of the code": (
            "Based on the following code structure, provide a bullet-point list of the major components and their responsibilities. "
            "For each component, include its name and a brief (1-2 lines) description of its role in the system. "
            "Clearly indicate how components interact if possible. "
            "Avoid long explanations and technical jargon. "
            "Ensure the list is formatted to fit on a single presentation slide, with no more than 6-8 bullet points. "
            "If the list is too long, summarize or group related components. "
            "Code excerpt:\n"
            f"{full_code[:2000]}"
        )
    }

    generated_content = {}
    for key, prompt in slide_prompts.items():
        response = llm.invoke(prompt)
        generated_content[key] = response if isinstance(response, str) else str(response)

    generate_presentation(generated_content, diagram_path=diagram_path)

if __name__ == "__main__":
    main()
# Generated by AIG Copilot - end
